{"ast":null,"code":"var _jsxFileName = \"/Users/Grzegorz/Documents/KURS/Projekty/React/karolina-prezent/src/context/WeatherContextProvider.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WeatherContext = /*#__PURE__*/createContext();\nexport const useWeatherContext = () => {\n  _s();\n\n  return useContext(WeatherContext);\n};\n\n_s(useWeatherContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const WeatherContextProvider = _ref => {\n  _s2();\n\n  let {\n    children\n  } = _ref;\n  const [data, setData] = useState();\n  const [city, setCity] = useState(\"warsaw\");\n\n  const getWeather = async () => {\n    const API_LINK = \"https://api.openweathermap.org/data/2.5/weather?q=\";\n    const API_KEY = \"&appid=\" + process.env.REACT_APP_API_KEY;\n    const API_UNITS = \"&units=metric\";\n    const URL = API_LINK + city + API_KEY + API_UNITS;\n    const res = await axios.get(URL);\n    setData(res.data);\n  };\n\n  useEffect(() => {\n    getWeather();\n  }, [city]);\n  const value = {\n    weather: data,\n    searchCity: setCity\n  };\n  return /*#__PURE__*/_jsxDEV(WeatherContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(WeatherContextProvider, \"N1QiG2xAVycjRNXMXjXCrD17NRI=\");\n\n_c = WeatherContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherContextProvider\");","map":{"version":3,"sources":["/Users/Grzegorz/Documents/KURS/Projekty/React/karolina-prezent/src/context/WeatherContextProvider.jsx"],"names":["React","createContext","useContext","useEffect","useState","axios","WeatherContext","useWeatherContext","WeatherContextProvider","children","data","setData","city","setCity","getWeather","API_LINK","API_KEY","process","env","REACT_APP_API_KEY","API_UNITS","URL","res","get","value","weather","searchCity"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,UAA/B,EAA2CC,SAA3C,EAAsDC,QAAtD,QAAsE,OAAtE;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,OAAO,MAAMC,cAAc,gBAAGL,aAAa,EAApC;AAEP,OAAO,MAAMM,iBAAiB,GAAG;AAAA;;AAAA,SAAML,UAAU,CAACI,cAAD,CAAhB;AAAA,CAA1B;;GAAMC,iB;;AAEb,OAAO,MAAMC,sBAAsB,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACtD,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,EAAhC;AACA,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBT,QAAQ,CAAC,QAAD,CAAhC;;AAEA,QAAMU,UAAU,GAAG,YAAY;AAC7B,UAAMC,QAAQ,GAAG,oDAAjB;AACA,UAAMC,OAAO,GAAG,YAAYC,OAAO,CAACC,GAAR,CAAYC,iBAAxC;AACA,UAAMC,SAAS,GAAG,eAAlB;AACA,UAAMC,GAAG,GAAGN,QAAQ,GAAGH,IAAX,GAAkBI,OAAlB,GAA4BI,SAAxC;AACA,UAAME,GAAG,GAAG,MAAMjB,KAAK,CAACkB,GAAN,CAAUF,GAAV,CAAlB;AACAV,IAAAA,OAAO,CAACW,GAAG,CAACZ,IAAL,CAAP;AACD,GAPD;;AAQAP,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,UAAU;AACX,GAFQ,EAEN,CAACF,IAAD,CAFM,CAAT;AAIA,QAAMY,KAAK,GAAG;AACZC,IAAAA,OAAO,EAAEf,IADG;AAEZgB,IAAAA,UAAU,EAAEb;AAFA,GAAd;AAKA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAEW,KAAhC;AAAA,cAAwCf;AAAxC;AAAA;AAAA;AAAA;AAAA,UADF;AAGD,CAxBM;;IAAMD,sB;;KAAAA,sB","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\nimport axios from \"axios\";\n\nexport const WeatherContext = createContext();\n\nexport const useWeatherContext = () => useContext(WeatherContext);\n\nexport const WeatherContextProvider = ({ children }) => {\n  const [data, setData] = useState();\n  const [city, setCity] = useState(\"warsaw\");\n\n  const getWeather = async () => {\n    const API_LINK = \"https://api.openweathermap.org/data/2.5/weather?q=\";\n    const API_KEY = \"&appid=\" + process.env.REACT_APP_API_KEY;\n    const API_UNITS = \"&units=metric\";\n    const URL = API_LINK + city + API_KEY + API_UNITS;\n    const res = await axios.get(URL);\n    setData(res.data);\n  };\n  useEffect(() => {\n    getWeather();\n  }, [city]);\n\n  const value = {\n    weather: data,\n    searchCity: setCity,\n  };\n\n  return (\n    <WeatherContext.Provider value={value}>{children}</WeatherContext.Provider>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}